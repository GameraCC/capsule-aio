'use strict';

const { app, BrowserWindow, BrowserView, session, TouchBarSlider } = require('electron')
const path = require('path')
const url = require('url')
const axios = require('axios')
const puppeteer = require('puppeteer-extra')
const StealthPlugin = require('puppeteer-extra-plugin-stealth')()

// Remove user agent evasion, puppeteer user agent override only replaces headless from user agent, not electron.
// createNewDefaultSession (puppeteer) uses different userAgent than electron
StealthPlugin.enabledEvasions.delete('user-agent-override')
puppeteer.use(StealthPlugin)

const { createCursor } = require('./ghost-cursor/lib/spoof.js')
const crypto = require('crypto')
const random = require('random')
const seedrandom = require('seedrandom')
const ProxyChain = require('proxy-chain')
const getPort = require('get-port')
const EventEmitter = require('events');
const Jimp = require('jimp').default
const pixelMatch = require('pixelmatch')

/* 
    This opencv version is not the default packaged opencv.js from their releases, The
    latter uses a callback to determine when the library's WASM is ready at runtime,
    whereas the former uses async promises to determine runtime initialization instead

    This version is built on Ubuntu 18.04 LTS with solely a build directory argument
*/
let openCvRuntimeInitialized = false, cv

try {
    cv = require('./opencv.js')
} catch (err) {
    console.error('[ERROR] Error Initializing OpenCV In Solver')
}

cv.then(_cv => {
    openCvRuntimeInitialized = true
    cv = _cv
}).catch((err) => {
    console.error('[ERROR] OpenCV Caught Error')
})

const RECAPTCHA_V3_INVISIBLE_TEST_URL = 'https://recaptcha-demo.appspot.com/recaptcha-v3-request-scores.php'
const RECAPTCHA_V2_VISIBLE_TEST_URL = 'https://patrickhlauke.github.io/recaptcha'
const GOOGLE_ACCOUNT_LOGIN_URL = 'https://accounts.google.com'
const DEFAULT_GOOGLE_URL = 'https://www.google.com'

const DEFAULT_CAPTCHA_SOLVER_WIDTH = 400
const DEFAULT_CAPTCHA_SOLVER_HEIGHT = 500

let DEFAULT_CAPTCHA_WINDOW_CONTENT = `
<!DOCTYPE html> <html style="background-color: #191E28;"> <head> <title>Captcha Solver</title> <style> @font-face { font-family: 'Alt Regular'; font-style: normal; font-weight: normal; src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2'); } </style> </head> <body style="overflow: hidden; user-select: none"> <div style="display: flex; align-items: center; justify-content: center; height: 500px; width: 100%"> <svg xmlns="http://www.w3.org/2000/svg" width="286.91px" height="286.91px" viewBox="0 0 286.91 286.91"> <path id="spinner" fill="#D1AAFF" d="M143.46,0C105.3,0,69.32,14.97,42.15,42.15C14.97,69.32,0,105.3,0,143.46c0,38.15,14.97,74.13,42.15,101.31 c27.18,27.18,63.16,42.15,101.31,42.15c1.56,0,2.87-1.32,2.87-2.87s-1.32-2.87-2.87-2.87c-75.93,0-137.71-61.78-137.71-137.71 S67.52,5.74,143.46,5.74s137.71,61.78,137.71,137.71c0,1.56,1.32,2.87,2.87,2.87s2.87-1.32,2.87-2.87 c0-38.15-14.97-74.13-42.15-101.31S181.61,0,143.46,0z" > <animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 143.455 143.455" to="360 143.455 143.455" dur="2s" repeatCount="indefinite" /> </path> </svg> <span style="position: absolute; font-size: 16px; color: #fff; font-family: 'Alt Regular', sans-serif">Waiting for Captcha</span> </div> </body> </html>
`

const DEFAULT_CAPTCHA_SOLVER_USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4427.0 Safari/537.36'

/**
 * Used to determine what to intercept when intercepting responses and requests
 *
 * @typedef {Object} Interception
 *
 * @property {boolean} [regex=true] - Whether or not to use a regex as the string, this value is only interpereted if false
 * @property {boolean} [stop=false] - Whether or not to fail the request upon interception
 * @property {RegExp | string} url - Regex of the url to match an interception to
 * @property {?string} content - Content to replace an intercepted request with
 * @property {?string} contentType - Content type of the content when intercepting a request
 */

/**
 * @typedef {Object} Session
 *
 * @property {?string} name - Name of the session
 * @property {string} id - Id of the session
 * @property {Object} cookies - Object containing cookie data regarding the session
 * @property {Object} localStorage - Object containing local storage data regarding the session
 * @property {Object} sessionStorage - Object containing session storage data regarding the session
 */

/**
 * @typedef {Object} Solver
 *
 * @property {string} sessionId - Session being used with the solver
 * @property {string} originalSessionId - Id of session which was created with the solver
 * @property {?string} proxy - Proxy used with the solver
 * @property {?boolean} autoClickCaptcha - Whether or not the solver's captchas should be auto clicked
 */

/**
 * @typedef {Object} WindowInfo
 *
 * @property {string} id - Id of the window
 * @property {"main" | "satellite"} type - Type of window
 * @property {Object} window - Electron BrowserWindow object used to control the BrowserWindow
 * @property {number} height - Height for BrowserViews
 * @property {number} width - Width for BrowserViews
 * @property {number} offsetX - X offset for BrowserViews
 * @property {number} offsetY - Y offset for BrowserViews
 */

/**
 * @typedef {Object} SolverInfo
 *
 * @property {string} id - Id of the solver
 * @property {Object} page - Puppeteer page object used to control the page
 * @property {Object} view - Electron BrowserView object used to control the BrowserView
 * @property {WindowInfo} window - Window being used with the solver
 * @property {Session} session - Session being used with the solver
 * @property {string} originalSessionId - Id of session which was created with the solver
 * @property {Object} proxy - Proxy server used by the page
 * @property {Function} proxy.rotate - Used to rotate the proxy used by the page
 * @property {{host: string, port: number, username: string | undefined, password: string | undefined}} proxy.current - Current proxy being used by the page
 * @property {boolean} autoClickCaptcha - Whether or not the solver's captchas should be auto clicked
 * @property {Object} usage - Usage info about the solver
 * @property {boolean} usage.available - Whether or not the solver's page is open and can be used
 * @property {boolean} usage.inUse - Whether or not the solver is currently in use
 * @property {?Function} usage.current - Promise rejection function to cancel the current promise attached to the current solver's usage
 */

/**
 * @TODO
 *
 * Backlogs in the captcha queue may be caused by the available event not being emitted in some cases, although this should not happen in any case
 *
 * Might want to keep in mind that, const page = (await this.settings.browser.pages())[view.webContents.id - 2]; works, but might change depending
 * on the number of browserviews in the browserwindows, could use injected variable with an id to identify page, and remove the variable once
 * identified
 * 
 * When creating new browserviews,loadurl prior to adding the browserview to a browserwindow, then proceed to fetching the page, otherwise fetching
 * the page from the array of puppeteer's browser.pages() gets messed up
 */
module.exports = class CaptchaSolver {
  /**
   * Constructor to create a captcha solver, must call the initialize function once constructed
   *
   * Flags that must be appended to electron:
   *
   * app.commandLine.appendSwitch("remote-debugging-port", port);
   *
   * For allowing puppeteer to connect to the electron's chromium window's chrome devtools protocol websocket
   *
   * app.commandLine.appendSwitch('disable-site-isolation-trials');
   *
   * This disables running each site in it's own process for web security reasons, disabling the flag allows access to cross origin iframes for automated mouse events
   *
   */
  constructor() {
    /**
     * List of solvers
     * @type {SolverInfo[]}
     */
    this.solvers = []

    /**
     * List of sessions
     * @type {Session[]}
     */
    this.sessions = []

    /**
     * List of windows
     * @type {WindowInfo[]}
     */
    this.windows = []

    /**
     * Settings containing the main window browser object
     */
    this.settings = {
      webSocketDebuggerUrl: null,
      browser: null,
    }

    // List of hosts with ports to proxy
    this.proxiedHosts = ["www.google.com:443", "geo.captcha-delivery.com:443", "api-js.datadome.co:443"]

    // Queue of captchas to be solved
    this.queue = []

    // Emitter for captcha queue
    this.emitter = new EventEmitter()

    // Captcha queue handling
    this.emitter.on('available', async solverId => {
      if (this.queue.length) {
        // Get the first captcha request in the queue
        const { type, url, siteKey, action, resolve, reject } = this.queue[0]
        try {
          // Find a solver that is the same id as the available solver, is available, and is not in use
          if (this.solvers.some(_solver => _solver.id === solverId && _solver.usage.available && !_solver.usage.inUse)) {
            // Remove the captcha request from the front of the queue
            this.queue.shift()

            const solverInfo = this.solvers.find(_solver => _solver.id === solverId && _solver.usage.available && !_solver.usage.inUse)
            solverInfo.usage.inUse = true

            let captchaToken

            // Solve the corresponding captcha type
            switch (type) {
              case 'RECAPTCHA_V2_VISIBLE':
                captchaToken = await this.wrapCaptchaSolveWithErrorHandling(this.solveRecaptchaV2Visible, { solverId: solverInfo.id, url, siteKey })
                break
              case 'RECAPTCHA_V3_INVISIBLE':
                captchaToken = await this.wrapCaptchaSolveWithErrorHandling(this.solveRecaptchaV3Invisible, { solverId: solverInfo.id, url, siteKey, action })
                break
              case 'RECAPTCHA_V2_INVISIBLE':
                captchaToken = await this.wrapCaptchaSolveWithErrorHandling(this.solveRecaptchaV2Invisible, { solverId: solverInfo.id, url, siteKey })
                break
              case 'DATADOME_GEETEST_SLIDE':
                captchaToken = await this.wrapCaptchaSolveWithErrorHandling(this.solveDatadomeGeetestSlide, {solverId: solverInfo.id, url})
                break;    
            }

            solverInfo.usage.inUse = false

            if (captchaToken) {
              // If acquiring a captcha token is successful, notify that the solver is available, and resolve the promise with the captchaToken
              this.emitter.emit('available', solverInfo.id)
              return resolve(captchaToken)
            } else this.queue.unshift({ type, url, siteKey, action, resolve, reject })
          } else return reject()
        } catch (err) {
          return reject()
        }
      } else return
    })

    // Difference between view.webContents.id corresponding to the given view's matching puppeteer page from the this.settings.browser.pages() array
    this.viewPageDifference = 2

    // Promise to await
  }

  randomUUIDV4 = () => {
    return `${crypto.randomBytes(4).toString('hex')}-${crypto.randomBytes(2).toString('hex')}-4${crypto.randomBytes(2).toString('hex').slice(1, 4)}-${crypto.randomBytes(2).toString('hex')}-${crypto.randomBytes(6).toString('hex')}`
  }
  randomInt = (min, max) => {
    const randomString = `${crypto.randomBytes(8).toString('hex')}-${Date.now()}`
    random.use(seedrandom(randomString))
    return random.int(min, max)
  }
  randomFloat = (min, max) => {
    const randomString = `${crypto.randomBytes(8).toString('hex')}-${Date.now()}`
    random.use(seedrandom(randomString))
    return random.float(min, max)
  }
  startUrl = file => (process.env.ELECTRON_START_URL && `${process.env.ELECTRON_START_URL}/${file}`) || url.format({ pathname: path.join(app.getAppPath(), `./${file}`), protocol: 'file:', slashes: true })

  /**
   * Creates and initializes the main captcha window
   *
   * @function initialize
   *
   * @param {Object} args - Arguments to initialize main captcha window
   * @param {number} args.port - Open port of the window initialized
   */
  initialize({ port }) {
    return new Promise((resolve, reject) => {
      try {
        // Create main window
        const window = new BrowserWindow({
          width: 375,
          height: 701,
          minWidth: 280,
          minHeight: 701,
          maxWidth: 675,
          // maxWidth: 375,
          maxHeight: 701,
          show: false,
          backgroundColor: '#191E28',
          frame: false,
          autoHideMenuBar: true,
          darkTheme: true,
          transparent: false,
          webPreferences: {
            preload: path.join(app.getAppPath(), './main.api.js'),
            nodeIntegration: false,
            enableRemoteModule: false,
            contextIsolation: true,
          },
        })
        
        if (app.isPackaged) window.removeMenu()

        // Load react
        window.loadURL(this.startUrl('solver.html'))

        // Show window once react is loaded
        window.webContents.on('did-finish-load', () => window.show())

        const id = this.randomUUIDV4()
        // Send message to identify window
        window.webContents.send('message', { id, type: 'main' })

        // Add main window into list of windows
        this.windows.push({
          id,
          type: 'main',
          window,
          height: 500,
          width: 375,
          offsetX: 0,
          offsetY: 71,
        })

        // Get the webSocketDebuggerUrl of the electron BrowserWindow being used as the solver
        axios.get(`http://localhost:${port}/json/version`)
          .then(async res => {
            if (res.status === 200) {
              const resJSON = res.data
              if (resJSON.webSocketDebuggerUrl) {
                this.settings.webSocketDebuggerUrl = resJSON.webSocketDebuggerUrl
                this.settings.browser = await puppeteer.connect({ defaultViewport: null, browserWSEndpoint: resJSON.webSocketDebuggerUrl })
                return resolve()
              } else throw new Error('Websocket debugger url not found')
            } else throw new Error(`HTTP request status not 200 while fetching websocket debugger url, status: ${res.statusCode}`)
          }).catch(err => {
            throw new Error(err)
          })
      } catch (err) {
        return reject(err)
      }
    })
  }

  /**
   * Creates a new satellite window for drag-out logic
   *
   * @function createNewSatelliteSolver
   */
  createNewSatelliteSolver() {
    return new Promise((resolve, reject) => {
      try {
        // Create satellite window
        const window = new BrowserWindow({
          width: 375,
          height: 701,
          minWidth: 280,
          minHeight: 701,
          maxWidth: 675,
          // maxWidth: 375,
          maxHeight: 701,
          show: false,
          backgroundColor: '#191E28',
          frame: false,
          autoHideMenuBar: true,
          darkTheme: true,
          transparent: false,
          webPreferences: {
            preload: path.join(app.getAppPath(), './main.api.js'),
            nodeIntegration: false,
            enableRemoteModule: false,
            contextIsolation: true,
          },
        })

        if (app.isPackaged) window.removeMenu()

        // Load react
        window.loadURL(this.startUrl('solver.html'))

        // Show window once react is loaded
        window.webContents.on('did-finish-load', () => window.show())

        const id = this.randomUUIDV4()
        // Send message to identify window
        window.webContents.send('message', { id, type: 'satellite' })

        // Add satellite window into list of windows
        this.windows.push({
          id,
          type: 'satellite',
          window,
          height: 500,
          width: 375,
          offsetX: 0,
          offsetY: 71,
        })

        return resolve(id)
      } catch (err) {
        return reject(err)
      }
    })
  }

  /**
   * Deletes a solver window, intended for use with only satellite windows
   *
   * @function deleteSolverWindow
   *
   * @param {Object} args - Arguments to delete a solver window
   * @param {string} args.windowId - Id of the window to be deleted
   */
  deleteSolverWindow({ windowId }, callback) {
    try {
      if (this.solvers.some(solver => solver.window.id === windowId)) throw new Error('Window is in use')
      else {
        if (this.windows.find(window => window.id === windowId)) {
            const windowInfo = this.windows.find(window => window.id === windowId)

            windowInfo.window.once('closed', () => {

                // Increment viewPageDifference, as the page array length decrements on window closed, but the webContents.id stays the same causing a net increase of 1 between webContents.id viewPageDifference
                this.viewPageDifference++

                // Delete the window from the class's windows list
                const windowIndex = this.windows.findIndex(window => window.id === windowId)
                // Unneeded to check if windowIndex exists, as this shouldn't be ran if it doesn't, but put for readability with other functions
                if (windowIndex > -1) {
                    this.windows.splice(windowIndex, 1)

                    return callback ? callback({ success: true }) : { success: true }
                }
            })

            // Destroy the window
            windowInfo.window.destroy()
        } else throw new Error('Window id not found in stored windows')
      }
    } catch (err) {
      return callback ? callback({ success: false, err }) : { success: false, err }
    }
  }

  /**
   * Changes the window of a solver
   *
   * @function changeSolverWindow
   *
   * @param {Object} args - Arguments to change the window of a solver
   * @param {string} args.solverId - Id of solver to be changed to a given window
   * @param {string} args.windowId - Id of the window to change a solver to
   */
  changeSolverWindow({ solverId, windowId }, callback) {
    try {
      // Does not need to check if its in use or available, because it's just switching browserviews from one window to another
      if (this.solvers.find(solver => solver.id === solverId) && this.windows.find(window => window.id === windowId)) {
        const solverInfo = this.solvers.find(solver => solver.id === solverId)
        const windowInfo = this.windows.find(window => window.id === windowId)

        // Remove BrowserView from the current window the solver is attached to
        const currentWindowInfo = this.windows.find(window => window.id === solverInfo.window.id)
        currentWindowInfo.window.removeBrowserView(solverInfo.view)

        // Add BrowserView to the new window
        windowInfo.window.addBrowserView(solverInfo.view)

        // Send message to the window to update its state
        windowInfo.window.webContents.send('message', { type: 'update' })

        // Update bounds for the BrowserView to match the new window's
        solverInfo.view.setBounds({ x: windowInfo.offsetX, y: windowInfo.offsetY, width: windowInfo.width, height: windowInfo.height })

        // Change solver's current window info
        solverInfo.window = windowInfo

        return callback ? callback({ success: true }) : { success: true }
      } else throw new Error('Solver or window id not found in stored solvers or windows')
    } catch (err) {
      return callback ? callback({ success: false, err }) : { success: false, err }
    }
  }

  /**
   * Creates a local proxy server used to rotate a puppeteer page's proxy via a callback
   *
   * @function createProxyServer
   *
   * @param {Object} args - Arguments to create a proxy server
   * @param {number} args.port - Port to run local proxy server on
   */
  createProxyServer({ port }, callback) {
    try {
      // Variable defining what proxy to use on the request
      let proxy = undefined

      // Setup a new local proxy server which proxies specific host:port addresses
      const server = new ProxyChain.Server({
        port,
        prepareRequestFunction: ({ request }) => {
          return {
            upstreamProxyUrl: this.proxiedHosts.includes(request.url) && proxy,
          }
        },
      })

      // Used to rotate the proxy, a current proxy property is assigned to be used for identifying the currently used proxy
      server.rotate = _proxy => {
        server.current = _proxy
        proxy = _proxy ? `http://${_proxy.username && _proxy.password ? `${_proxy.username}:${_proxy.password}@` : ''}${_proxy.host}:${_proxy.port}` : undefined
      }

      server.listen()

      return server
    } catch (err) {
      return callback ? callback({ success: false, err }) : { success: false, err }
    }
  }

  /**
   * Creates a new default session by fetching google cookies to use
   *
   * @function createNewDefaultSession
   */
  createNewDefaultSession() {
    return new Promise(async (resolve, reject) => {
      try {
        // Secondary headless solver is created to fetch google cookies
        const browser = await puppeteer.launch({  executablePath: getChromiumExecPath(), headless: true, args: ['--ignore-certificate-errors', '--disable-features=IsolateOrigins,site-per-process'] })

        // Must do this to register puppeteer-extra-plugin-stealth properties on initial solver launch page
        const [page] = await browser.pages()
        browser.emitter.emit('targetcreated', page.target())
        await page.reload()

        // Go to the default google url to initialize a session
        await page.goto(DEFAULT_GOOGLE_URL)

        // Save the newly created session's cookie, localStorage and sessionStorage data
        const data = await page._client.send('Network.getAllCookies')
        data.localStorage = await page.evaluate(() => ({ ...window.localStorage }))
        data.sessionStorage = await page.evaluate(() => ({ ...window.sessionStorage }))

        await browser.close()

        return resolve(data)
      } catch (err) {
        return reject(err)
      }
    })
  }

  /**
   * Creates a new google account signed in session, expects client to pass an id of a newly created empty default solver
   * 
   * This method updates the session of the solver to a newly generated temporary default session, if the method throws an
   * error, by refreshing or closing the solver, the solver should be updated back to its prior session, before
   * continuing with any further action, as the temporary session will persist on the solver until the method resolves
   *
   * @function createNewGoogleAccountSession
   *
   * @param {Object} args - Arguments to create a new google account signed in sesssion
   * @param {string} args.solverId - Id of the desired solver to be used to get google account cookies
   * @param {string} args.name - Name to give newly created session
   */
  createNewGoogleAccountSession({ solverId, name }) {
    return new Promise(async (resolve, reject) => {
      try {
        if (this.solvers.some(_solver => _solver.id === solverId && _solver.usage.available && !_solver.usage.inUse)) {
          const solverInfo = this.solvers.find(_solver => _solver.id === solverId)
          solverInfo.usage.inUse = true
          solverInfo.usage.current = reject
          const page = solverInfo.page

          const _session = {
            name: undefined,
            id: this.randomUUIDV4(),
            ...(await this.createNewDefaultSession()),
          }
          let previousSessionId = solverInfo.session.id
          this.sessions.push(_session)

          await this.updateSession({solverId, sessionId: _session.id, bypassInuse: true})

          // Intercept the response once the client has logged into gmail and is being redirected
          this.interceptResponse(
            {
              page,
              interception: { url: /(https:\/\/myaccount\.google\.com\/|https:\/\/myaccount\.google\.com\/\?pli=1)(?!(\?|[a-zA-z]|[0-9]))/ },
            },
            async () => {
                try {
                    const id = this.randomUUIDV4()
                    // Fetch google account cookies
                    const cookies = (await page._client.send('Network.getAllCookies')).cookies
      
                    // Setup an interception of the default google url to be replaced with the default captcha window content
                    await this.interceptRequest({
                      page,
                      interception: { url: /https:\/\/www\.google\.com/, content: DEFAULT_CAPTCHA_WINDOW_CONTENT, contentType: 'text/html' },
                    })
      
                    // Reset solver view once google account cookies are fetched
                    await page.goto(DEFAULT_GOOGLE_URL)
                    // Fetch google page localStorage and sessionStorage from default google url
                    const localStorage = await page.evaluate(() => ({ ...window.localStorage }))
                    const sessionStorage = await page.evaluate(() => ({ ...window.sessionStorage }))
      
                    // Fetch cookies and push to a new session
                    this.sessions.push({
                      name,
                      id,
                      cookies,
                      localStorage,
                      sessionStorage,
                    })
      
                    // Revert solver back to the previous session, and delete the temporary google account session
                    await this.updateSession({solverId, sessionId: previousSessionId, bypassInuse: true})
                    this.deleteSession({sessionId: previousSessionId})
      
                    solverInfo.usage.inUse = false
                    this.emitter.emit('available', solverInfo.id)
      
                    return resolve(id)      
                } catch (err) {
                    return reject(err)
                }
            }
          )

          await page.goto(GOOGLE_ACCOUNT_LOGIN_URL)
        } else throw new Error('Solver in use')
      } catch (err) {
        return reject(err)
      }
    })
  }

  /**
   * Creates a new solver window
   *
   * @function createNewSolverWindow
   *
   * @param {Object} args - Arguments to create a new solver window
   * @param {string} args.proxy - Proxy to initialize solver with
   * @param {boolean} args.autoClickCaptcha - Whether or not captchas should be auto clicked
   */
  createNewSolverWindow({ proxy, autoClickCaptcha }) {
    return new Promise(async (resolve, reject) => {
      try {
        // Initialize proxy server used to rotate proxies
        const proxyServer = this.createProxyServer({ port: await getPort() })
        // Create an electron session from a random partition string
        const electronSession = session.fromPartition(this.randomUUIDV4(), { cache: false })
        // Set the session's proxy to the newly created proxy server
        await electronSession.setProxy({ proxyRules: `http://localhost:${proxyServer.port}` })
        // Set the session's proxy to the desired user agent
        electronSession.setUserAgent(DEFAULT_CAPTCHA_SOLVER_USER_AGENT)
        // Initialize an electron BrowserView with the newly created session
        const view = new BrowserView({
          webPreferences: {
            // backgroundThrottling: false,
            session: electronSession,
            contextIsolation: true,
            nodeIntegration: false,
            enableRemoteModule: false,
          },
        })

        // Attach browserview to the browserwindow
        await view.webContents.loadURL(`data:text/html,${DEFAULT_CAPTCHA_WINDOW_CONTENT}`)
        const windowInfo = this.windows.find(window => window.type === 'main')
        windowInfo.window.addBrowserView(view)
        view.setBounds({ x: windowInfo.offsetX, y: windowInfo.offsetY, width: windowInfo.width, height: windowInfo.height })

        // Get the puppeteer page object of the added browserview
        const page = (await this.settings.browser.pages())[view.webContents.id - this.viewPageDifference]

        // Push the newly created session into the list of sessions
        const _session = {
          name: undefined,
          id: this.randomUUIDV4(),
          ...(await this.createNewDefaultSession()),
        }
        this.sessions.push(_session)

        // Push the newly created solver into the list of solvers
        const id = this.randomUUIDV4()
        this.solvers.push({ id, page, view, window: windowInfo, session: _session, originalSessionId: _session.id, proxy: proxyServer, autoClickCaptcha, usage: { available: true, inUse: false, current: null } })

        // Register page on close logic
        page.on('close', () => {
          const solverInfo = this.solvers.find(_solver => _solver.id === id)
          solverInfo.usage.available = false
        })

        // Rotate the proxy, and initialize the solver with the session's cookies
        proxyServer.rotate(proxy)

        await page.setCookie(..._session.cookies)
        
        // Bypass content-security-policy of any pages
        await page.setBypassCSP(true)

        // Setup an interception of the default google url to be replaced with the default captcha window content
        await this.interceptRequest({
          page,
          interception: { url: /https:\/\/www\.google\.com/, content: DEFAULT_CAPTCHA_WINDOW_CONTENT, contentType: 'text/html' },
        })

        await page.goto(DEFAULT_GOOGLE_URL)

        // Initialize the solver with the session's local and session storage
        await page.evaluate(_session => {
          Object.keys(_session.localStorage).forEach(key => window.localStorage.setItem(key, _session.localStorage[key]))
          Object.keys(_session.sessionStorage).forEach(key => window.sessionStorage.setItem(key, _session.sessionStorage[key]))
        }, _session)

        // Emit available event to prompt captchas from the queue onto the new solver
        this.emitter.emit('available', id)

        return resolve(id)
      } catch (err) {
        return reject(err)
      }
    })
  }

  /**
   * Exports all solver windows into a reloadable JSON object
   *
   * @function exportSolvers
   */
  exportSolvers(callback) {
    try {
      const exportArray = this.solvers.map(solverInfo => ({ id: solverInfo.id, windowId: solverInfo.window.id, sessionId: solverInfo.session.id, originalSessionId: solverInfo.originalSessionId, proxy: solverInfo.proxy.current, autoClickCaptcha: solverInfo.autoClickCaptcha }))

      return callback ? callback(exportArray) : exportArray
    } catch (err) {
      return callback ? callback({ success: false, err }) : { success: false, err }
    }
  }

  /**
   * Exports all sessions saved
   *
   * @function exportSessions
   */
  exportSessions(callback) {
    try {
      return callback ? callback(this.sessions) : this.sessions
    } catch (err) {
      return callback ? callback({ success: false, err }) : { success: false, err }
    }
  }

  /**
   * Imports new sessions from an array of exported sessions
   *
   * @function importSessions
   *
   * @param {Object} args - Arguments to import sessions
   * @param {Array.<Session>} args.sessions - Sessions to be imported
   */
  importSessions({ sessions }, callback) {
    try {
      // Filter locally duplicate session names and ids
      let _sessions = sessions.filter((session, i) => sessions.findIndex(_session => _session.id === session.id || (session.name !== null && _session.name === session.name)) === i)
      // Filter duplicate session names and ids against currently used sessions
      _sessions = sessions.filter(session => !this.sessions.some(_session => _session.id === session.id || (session.name !== null && _session.name === session.name)))

      this.sessions.push(..._sessions)

      return callback ? callback({ success: true }) : { success: true }
    } catch (err) {
      return callback ? callback({ success: false, err }) : { success: false, err }
    }
  }

  /**
   * Returns a promise for containing logic for importing a solver
   *
   * @function importSolverLogic
   *
   * @param {Solver} solver - Solver to be imported
   *
   */
  importSolverLogic({ solver }) {
    return new Promise(async (resolve, reject) => {
      try {
        const _session = this.sessions.find(_session => _session.id === solver.sessionId)

        if (_session) {
          // Initialize proxy server used to rotate proxies
          const proxyServer = this.createProxyServer({ port: await getPort() })
          // Create an electron session from a random partition string
          const electronSession = session.fromPartition(this.randomUUIDV4(), { cache: false })
          // Set the session's proxy to the newly created proxy server
          await electronSession.setProxy({ proxyRules: `http://localhost:${proxyServer.port}` })
          // Set the session's proxy to the desired user agent
          electronSession.setUserAgent(DEFAULT_CAPTCHA_SOLVER_USER_AGENT)
          // Initialize an electron BrowserView with the newly created session
          const view = new BrowserView({
            webPreferences: {
              // backgroundThrottling: false,
              session: electronSession,
              contextIsolation: true,
              nodeIntegration: false,
              enableRemoteModule: false  
            },
          })

          // Attach browserview to the browserwindow
          await view.webContents.loadURL(`data:text/html,${DEFAULT_CAPTCHA_WINDOW_CONTENT}`)
          const windowInfo = this.windows.find(window => window.type === 'main')
          windowInfo.window.addBrowserView(view)
          view.setBounds({ x: windowInfo.offsetX, y: windowInfo.offsetY, width: windowInfo.width, height: windowInfo.height })

          // Get the puppeteer page object of the added browserview
          const page = (await this.settings.browser.pages())[view.webContents.id - this.viewPageDifference]

          // Push the newly created solver into the list of solvers
          const id = this.randomUUIDV4()
          this.solvers.push({ id, page, view, window: windowInfo, session: _session, originalSessionId: solver.originalSessionId, proxy: proxyServer, autoClickCaptcha: solver.autoClickCaptcha, usage: { available: true, inUse: false, current: null } })

          // Register page on close logic
          page.on('close', () => {
            const solverInfo = this.solvers.find(_solver => _solver.id === id)
            solverInfo.usage.available = false
          })

          // Rotate the proxy, and initialize the solver with the session's cookies
          proxyServer.rotate(solver.proxy)
          await page.setCookie(..._session.cookies)

          // Bypass content-security-policy of any pages
          await page.setBypassCSP(true)

          // Setup an interception of the default google url to be replaced with the default captcha window content
          await this.interceptRequest({
            page,
            interception: { url: /https:\/\/www\.google\.com/, content: DEFAULT_CAPTCHA_WINDOW_CONTENT, contentType: 'text/html' },
          })

          await page.goto(DEFAULT_GOOGLE_URL)

          // Initialize the solver with the session's local and session storage
          await page.evaluate(_session => {
            Object.keys(_session.localStorage).forEach(key => window.localStorage.setItem(key, _session.localStorage[key]))
            Object.keys(_session.sessionStorage).forEach(key => window.sessionStorage.setItem(key, _session.sessionStorage[key]))
          }, _session)

          return resolve()
        } else throw new Error('Session id not found in stored sessions')
      } catch (err) {
        return reject(err)
      }
    })
  }

  /**
   * Imports new solver windows from an array of exported solver's
   *
   * @function importSolvers
   *
   * @param {Object} args - Arguments to import new solver windows
   * @param {Array.<Solver>} args.solvers - List of solver's with data to initialize the solver window with
   */
  importSolvers({ solvers }) {
    return new Promise(async (resolve, reject) => {
      try {
        const createSolverPromises = []
        solvers.forEach(solver => createSolverPromises.push(this.importSolverLogic.bind(this)({ solver })))
        Promise.all(createSolverPromises).then(resolve)
      } catch (err) {
        return reject(err)
      }
    })
  }

  /**
   * Updates a given solver's session
   *
   * @function updateSession
   *
   * @param {Object} args - Arguments to update a given solver's session
   * @param {string} args.solverId - Id of the desired solver to update session settings
   * @param {string} args.sessionId - Id of the session to be updated with
   * @param {boolean} args.bypassInuse - Bypasses the check for the inUse property on the solver also bypasses the current (cancel) property being set to this reject, used for internal methods
   *
   * @todo Going to the DEFAULT_GOOGLE_URL and intercepting may be trivial, as the solver should be on the DEFAULT_GOOGLE_URL variable if it is not in use
   */
  updateSession({ solverId, sessionId, bypassInuse}) {
    return new Promise(async (resolve, reject) => {
      try {
        if (this.solvers.some(_solver => _solver.id === solverId && _solver.usage.available && (bypassInuse || !_solver.usage.inUse)) && this.sessions.find(_session => _session.id === sessionId)) {
          const solverInfo = this.solvers.find(_solver => _solver.id === solverId && _solver.usage.available && (bypassInuse || !_solver.usage.inUse))
          !bypassInuse && (solverInfo.usage.inUse = true)
          !bypassInuse && (solverInfo.usage.current = reject)
          const page = solverInfo.page

          const _session = this.sessions.find(__session => __session.id === sessionId)

          // Clear the solver's old cookies
          const oldCookies = (await page._client.send('Network.getAllCookies')).cookies

          for (const cookie of oldCookies) {
            await page._client.send('Network.deleteCookies', cookie)
          }

          // Update the solver with the new session's cookies
          await page.setCookie(..._session.cookies)

          // Setup an interception of the default google url to be replaced with the default captcha window content
          await this.interceptRequest({
            page,
            interception: { url: /https:\/\/www\.google\.com/, content: DEFAULT_CAPTCHA_WINDOW_CONTENT, contentType: 'text/html' },
          })

          await page.goto(DEFAULT_GOOGLE_URL)

          // Remove the old session's local and session storage, then update the solver with the new session's local and session storage
          await page.evaluate(_session => {
            Object.keys(window.localStorage).forEach(key => window.localStorage.removeItem(key))
            Object.keys(window.sessionStorage).forEach(key => window.sessionStorage.removeItem(key))

            Object.keys(_session.localStorage).forEach(key => window.localStorage.setItem(key, _session.localStorage[key]))
            Object.keys(_session.sessionStorage).forEach(key => window.sessionStorage.setItem(key, _session.sessionStorage[key]))
          }, _session)

          // Update the solver's session info
          solverInfo.session = _session
          !bypassInuse && (solverInfo.usage.inUse = false)
          this.emitter.emit('available', solverInfo.id)
          return resolve()
        } else throw new Error('Solver, and session id not found or not available currently')
      } catch (err) {
        return reject()
      }
    })
  }

  /**
   * Deletes and closes a given solver from the class
   *
   * @param {Object} args
   * @param {string} args.solverId - Id of the desired solver to be deleted
   */
  deleteSolver({ solverId }, callback) {
    try {
      if (this.solvers.find(solver => solver.id === solverId)) {
        const solverInfo = this.solvers.find(_solver => _solver.id === solverId)
        // Cancel current usage by calling the promise rejection function if present, as false incase it is a solve that is occuring, to be pushed to front of queue
        if (solverInfo && solverInfo.usage.inUse && solverInfo.usage.current) solverInfo.usage.current(false)

        // Set available variable to false, and inUse to true incase the solver gets another use in between this fraction of a time period
        solverInfo.usage.available = false
        solverInfo.usage.inUse = true

        // Remove the solver's attached browserview from the browserwindow
        const windowInfo = this.windows.find(window => window.type === 'main') // Solvers can only be deleted from the main window, not satellite windows
        windowInfo.window.removeBrowserView(solverInfo.view)

        // Delete the solver from the class's solvers list
        const solverIndex = this.solvers.findIndex(_solver => _solver.id === solverId)
        // Unneeded to check if solverIndex exists, as this shouldn't be ran if it doesn't, but put for readability with other functions
        if (solverIndex > -1) {
          this.solvers.splice(solverIndex, 1)

          return callback ? callback({ success: true }) : true
        }
      } else throw new Error('Solver id not found in stored solvers')
    } catch (err) {
      return callback ? callback({ sucess: false, err }) : { success: false, err }
    }
  }

  /**
   * Deletes and closes a given session from the class
   *
   * @param {Object} args
   * @param {string} args.sessionId - Id of the desired session to be deleted
   */
  deleteSession({ sessionId }, callback) {
    try {
      // Check if session is in use, return unsuccessful if so
      if (this.solvers.some(_solver => _solver.session.id === sessionId)) throw new Error('Session is in use')
      else {
        // Delete the session from the class's sessions list
        const sessionIndex = this.sessions.findIndex(_session => _session.id === sessionId)
        if (sessionIndex > -1) {
          this.sessions.splice(sessionIndex, 1)

          return callback ? callback({ success: true }) : true
        } else throw new Error('Session id not found in stored sessions')
      }
    } catch (err) {
      return callback ? callback({ success: false, err }) : { success: false, err }
    }
  }

  /**
   * Refreshes a solver, and if solving a captcha stops, pushing it to the front of the captcha queue
   *
   * @param {Object} args
   * @param {string} args.solverId - Id of the desired solver to be deleted
   */
  refreshSolver({ solverId }) {
    return new Promise(async (resolve, reject) => {
      try {
        const solverInfo = this.solvers.find(_solver => _solver.id === solverId)

        solverInfo.usage.inUse = true
        const page = solverInfo.page

        // Setup an interception of the default google url to be replaced with the default captcha window content
        await this.interceptRequest({
          page,
          interception: { url: /https:\/\/www\.google\.com/, content: DEFAULT_CAPTCHA_WINDOW_CONTENT, contentType: 'text/html' },
        }, () => {
            // Set inuse to false prior to rejecting the function
            solverInfo.usage.inUse = false

            // Cancel current usage by calling the promise rejection function if present, as false incase it is a solve that is occuring, to be pushed to front of queue
            if (solverInfo.usage.current) solverInfo.usage.current(false)

            this.emitter.emit('available', solverInfo.id)

            return resolve()
        })

        // Reset solver view by going to the intercepted url
        await page.goto(DEFAULT_GOOGLE_URL)
      } catch (err) {
        return reject(err)
      }
    })
  }

  /**
   * Modifies whether a given solver should auto click captchas
   *
   * @function updateAutoClickCaptcha
   *
   * @param {Object} args - Arguments to modify whether a solver should auto click captchas
   * @param {string} args.solverId - Id of the desired solver to update auto click captcha settings
   * @param {boolean} args.autoClickCaptcha - Whether or not captchas should be auto clicked
   */
  updateAutoClickCaptcha({ solverId, autoClickCaptcha }, callback) {
    try {
      const solverInfo = this.solvers.find(_solver => _solver.id === solverId)

      solverInfo.autoClickCaptcha = autoClickCaptcha

      return callback ? callback({ success: true }) : true
    } catch (err) {
      return callback ? callback({ success: false, err }) : { success: false, err }
    }
  }

  /**
   * Rotates a given solver's proxy via latter's id
   *
   * @function rotateProxy
   *
   * @param {Object} args - Arguments to rotate a given solver's proxy via latter's id
   * @param {string} args.solverId - Id of the desired solver to rotate the proxy to
   * @param {{host: string, port: number, username: string | undefined, password: string | undefined}} args.proxy - Parsed proxy to be rotated to
   */
  rotateProxy({ solverId, proxy }, callback) {
    try {
      const solverInfo = this.solvers.find(_solver => _solver.id === solverId)

      solverInfo.proxy.rotate(proxy)

      return callback ? callback({ success: true }) : true
    } catch (err) {
      return callback ? callback({ success: false, err }) : { success: false, err }
    }
  }

  /**
   * Intercept a request given a URL
   *
   * @function interceptRequest
   *
   * @param {Object} args - Arguments to intercept a request
   * @param {Object} args.page - Puppeteer page
   * @param {Interception} args.interception - Url to intercept, and content along with it's content type to replace it with
   * @param {?Function} args.callback - If no interception content is provided, provide a callback which is passed the request itself, the intercepted request is aborted
   */
  interceptRequest({ page, interception }, callback) {
    return new Promise(async (resolve, reject) => {
      try {
        const client = await page.target().createCDPSession()

        await client.send('Fetch.enable', {
          patterns: [{ urlPattern: '*', requestStage: 'Request' }],
        })

        client.on('Fetch.requestPaused', async interceptedRequest => {
            try {
                if (interception.regex === false ? interception.url === interceptedRequest.request.url : interception.url.test(interceptedRequest.request.url)) {
                    if (interception.content) {
                      await client.send('Fetch.fulfillRequest', {
                          requestId: interceptedRequest.requestId,
                          responseCode: 200,
                          responseHeaders: [{ name: 'content-type', value: interception.contentType }],
                          body: Buffer.from(interception.content).toString('base64'),
                        })
                    } else if (interception.stop === true) await client.send('Fetch.failRequest', { requestId: interceptedRequest.requestId, errorReason: 'Aborted' })
                    else await client.send('Fetch.continueRequest', { requestId: interceptedRequest.requestId })
      
                    if (callback) callback(interceptedRequest.request)
      
                    await client.detach()
                } else {
                  await client.send('Fetch.continueRequest', { requestId: interceptedRequest.requestId })
                }      
            } catch (err) {
                console.error('Error in function: interceptRequest, callback for Fetch.requestPaused: ', err)
                return
            }
        })

        return resolve()
      } catch (err) {
        return reject(err)
      }
    })
  }

  /**
   * Intercept a response given a URL
   * 
   * The response.body is encoded in base64, to handle binary response data ensure
   * the response.body parameter is decoded from base64 when handling text/plain
   * content-type data
   *
   * @function interceptResponse
   *
   * @param {Object} args - Arguments to intercept a response
   * @param {Object} args.page - Puppeteer page
   * @param {Interception} args.interception - Url to intercept
   */
  async interceptResponse({ page, interception }, callback) {
    try {
      const client = await page.target().createCDPSession()

      await client.send('Fetch.enable', {
        patterns: [{ requestStage: 'Response' }],
      })

      client.on('Fetch.requestPaused', async interceptedResponse => {
          try {
            if (interception.regex === false ? interception.url === interceptedResponse.request.url : interception.url.test(interceptedResponse.request.url)) {
                const responseBody = await client.send('Fetch.getResponseBody', { requestId: interceptedResponse.requestId })
      
                await client.send('Fetch.continueRequest', { requestId: interceptedResponse.requestId })
      
                const response = {
                  statusCode: interceptedResponse.responseStatusCode,
                  headers: interceptedResponse.responseHeaders.reduce((obj, header) => ((obj[header.name] = header.value), obj), {}),
                  body: responseBody.body,
                }
      
                await client.detach()
      
                if (callback) callback(response)
              } else {
                await client.send('Fetch.continueRequest', { requestId: interceptedResponse.requestId })
              }      
          } catch (err) {
              console.error('Error in function: interceptResponse, callback for Fetch.requestPaused: ', err)
              return
          }
      })
    } catch (err) {
      return callback ? callback({ success: false, err }) : { success: false, err }
    }
  }

  /**
   * Returns HTML content to solve a visible recaptcha v2
   *
   * @function getRecaptchaV2VisibleContent
   *
   * @param {string} siteKey - Site key of captcha to implement into HTML
   */
  getRecaptchaV2VisibleContent(siteKey) {
    return `
            <!DOCTYPE html>
            <html style="background-color: #191E28;">
                <head>
                    <title>Captcha Solver</title>
                    <script src="https://www.google.com/recaptcha/api.js"></script>
                </head>
                <body>
                    <div class="g-recaptcha" data-sitekey="${siteKey}"></div>
                </body>
            </html>
        `
  }

  getRecaptchaV2InvisibleContent(siteKey) {
    return `
        <!DOCTYPE html>
        <html style="background-color: #191E28;">
            <head>
                <title>Captcha Solver</title>
                <script src="https://www.google.com/recaptcha/api.js"></script>
            </head>
            <body>
                <div class="g-recaptcha" data-sitekey=${siteKey} data-size="invisible"></div>
                <script>
                    grecaptcha.ready(() => {
                        grecaptcha.execute();
                    })
                </script>
            </body>
        </html>
    `
}

  /**
   * Returns HTML content to solve a invisible recaptcha v3
   *
   * @function getRecaptchaV3InvisibleContent
   *
   * @param {string} siteKey - Site key of captcha to implement into HTML
   * @param {string} action - Action of recaptcha v3 to implement into HTML
   *
   */
  getRecaptchaV3InvisibleContent(siteKey, action) {
    return `
            <!DOCTYPE html>
            <html style="background-color: #191E28;">
                <head>
                    <title>Captcha Solver</title>
                    <script src="https://www.google.com/recaptcha/api.js?render=${siteKey}"></script>
                </head>
                <body>
                    <script>
                        grecaptcha.ready(() => {
                            grecaptcha.execute("${siteKey}", {action: "${action}"});
                        })
                    </script>
                </body>
            </html>
        `
  }

  /**
   * Solves for a invisible v3 recaptcha
   *
   * @function solveRecaptchaV3Invisible
   *
   * @param {Object} args - Arguments to request a solve for an invisible v3 recaptcha
   * @param {string} args.solverId - Id of the desired solver to request a solve for an invisible v3 recaptcha
   * @param {string} args.url - Url of the page with an invisible v3 recpatcha
   * @param {string} args.siteKey - Site key of the page with an invisible v3 recaptcha
   * @param {string} args.action - Action of the invisible v3 recaptcha
   *
   * @todo Look into mimicking human-like mouse movements on v3 invisible recaptcha before requesting it for higher scores
   */
  solveRecaptchaV3Invisible({ solverId, url, siteKey, action }) {
    return new Promise(async (resolve, reject) => {
      try {
        // Don't need to update <Solver>.usage.inUse variable, as it's managed by the intermediate captcha queue handling methods
        const solverInfo = this.solvers.find(_solver => _solver.id === solverId)
        solverInfo.usage.current = reject
        const page = solverInfo.page
        page.on('close', () => {
          // True or false decides whether to retry the solve function until it is solved, or push to beginning of queue
          return reject(false)
        })

        // Setup an interception for the captcha token
        this.interceptResponse(
            {
              page,
              interception: { url: /https:\/\/www\.google\.com\/recaptcha\/api2\/reload/ },
            },
            async res => {
                try {
                    // Extract captcha token from response body
                    const captchaToken = /("rresp",)(")(.*?)(",)/gm.exec(Buffer.from(res.body, 'base64').toString())[3]
        
                    // Reset to default captcha window content once solved
                    await this.interceptRequest({
                        page,
                        interception: { url: /https:\/\/www\.google\.com/, content: DEFAULT_CAPTCHA_WINDOW_CONTENT, contentType: 'text/html' },
                    })
        
                    await page.goto(DEFAULT_GOOGLE_URL)            
        
                    // Verify captcha token exists
                    if (captchaToken) {
                        // If captcha token exists, resolve 
                        return resolve(captchaToken)
                    } else {
                        // True or false decides whether to retry the solve function until it is solved, or push to beginning of queue
                        return reject(true)
                    }
                } catch (err) {
                    return reject(true)
                }
            }
          )  

        // Intercept the invisible recaptcha v3 URL, replace it with the invisible recaptcha v3 content to simulate being on the same site
        await this.interceptRequest({
          page,
          interception: { url: new RegExp(url.replace(/\?/g, '\\?')), content: this.getRecaptchaV3InvisibleContent(siteKey, action), contentType: 'text/html' },
        })

        await page.goto(url)

      } catch (err) {
        // True or false decides whether to retry the solve function until it is solved, or push to beginning of queue
        return reject(false)
      }
    })
  }

  /**
   * Solves for a visible v2 recaptcha
   *
   * @function solveRecaptchaV2Visible
   *
   * @param {Object} args - Arguments to request a solve for a visible v2 recaptcha
   * @param {string} args.solverId - Id of the desired solver to request a solve for an invisible v3 recaptcha
   * @param {string} args.url - Url of the page with a visible v2 recpatcha
   * @param {string} args.siteKey - Site key of the page with a visible v2 recaptcha
   */
  solveRecaptchaV2Visible({ solverId, url, siteKey }) {
    return new Promise(async (resolve, reject) => {
      try {
        // Don't need to update <Solver>.usage.inUse variable, as it's managed by the intermediate captcha queue handling methods
        const solverInfo = this.solvers.find(_solver => _solver.id === solverId)
        solverInfo.usage.current = reject
        const page = solverInfo.page
        page.on('close', () => {
          // True or false decides whether to retry the solve function until it is solved, or push to beginning of queue
          return reject(false)
        })

        // Create a cursor to mimic human-like mouse movements to positions and clicks on the page
        const cursor = createCursor(page, { x: this.randomInt(0, 1920), y: this.randomInt(0, 1080) })

        // Intercept the visible recaptcha v2 URL, replace it with the visible recaptcha v2 content to simulate being on the same site
        await this.interceptRequest({
          page,
          interception: { url: new RegExp(url.replace(/\?/g, '\\?')), content: this.getRecaptchaV2VisibleContent(siteKey), contentType: 'text/html' },
        })

        // TODO
        // Move solver to front before this?
        // const { window } = solverInfo.window
        // try {
        //     window.setTopBrowserView(solverInfo.view)
        // } catch (err) {
        //     console.error('Unable to set top browser view', solverId, err.message)
        // }
        // window.webContents.send('message', { id: solverInfo.id, type: 'focus' })

        this.interceptResponse(
          {
            page,
            interception: { url: /https:\/\/www\.google\.com\/recaptcha\/api2\/userverify/ },
          }, async res => {
              try {
                // Extract captcha token from response body
                const captchaToken = /("uvresp",)(")(.*?)(",)/gm.exec(Buffer.from(res.body, 'base64').toString())[3]

                // Reset to default captcha window content once solved
                await this.interceptRequest({
                    page,
                    interception: { url: /https:\/\/www\.google\.com/, content: DEFAULT_CAPTCHA_WINDOW_CONTENT, contentType: 'text/html' },
                })

                await page.goto(DEFAULT_GOOGLE_URL)

                // Verify captcha token from length of string
                if (captchaToken && captchaToken.length < 1000) {
                    // If captcha token exists, resolve the captcha token
                    return resolve(captchaToken)
                } else {
                    // True or false decides whether to retry the solve function until it is solved, or push to beginning of queue
                    return reject(true)
                }
              } catch (err) {
                  return reject(true)
              }
          }
        )

        const autoClickCaptcha = async _ => {
            try {
                // Auto click the visible recaptcha v2 by accessing the iframe, wait for the recaptcha button and the iframe to be present on screen
                await cursor.click('#recaptcha-anchor', { iframe: 'iframe[src*="api2/anchor"]', waitForIframe: true, waitForSelector: true })
            } catch (err) {
                return reject(true)
            }
        }

        // If auto click captcha is enabled, auto click the captcha
        solverInfo.autoClickCaptcha && autoClickCaptcha()

        await page.goto(url)
      } catch (err) {
        // True or false decides whether to retry the solve function until it is solved, or push to beginning of queue
        return reject(false)
      }
    })
  }

    /**
   * Solves for an invisible v2 recaptcha
   *
   * @function solveRecaptchaV2Invisible
   *
   * @param {Object} args - Arguments to request a solve for an invisible v2 recaptcha
   * @param {string} args.solverId - Id of the desired solver to request a solve for an invisible v2 recaptcha
   * @param {string} args.url - Url of the page with an invisible v2 recpatcha
   * @param {string} args.siteKey - Site key of the page with an invisible v2 recaptcha
   *
   * @todo Look into mimicking human-like mouse movements on v2 invisible recaptcha before requesting it for higher scores
   */
  solveRecaptchaV2Invisible({ solverId, url, siteKey }) {
    return new Promise(async (resolve, reject) => {
      try {
        // Don't need to update <Solver>.usage.inUse variable, as it's managed by the intermediate captcha queue handling methods
        const solverInfo = this.solvers.find(_solver => _solver.id === solverId)
        solverInfo.usage.current = reject
        const page = solverInfo.page
        page.on('close', () => {
          // True or false decides whether to retry the solve function until it is solved, or push to beginning of queue
          return reject(false)
        })

        // Intercept the invisible recaptcha v3 URL, replace it with the invisible recaptcha v3 content to simulate being on the same site
        await this.interceptRequest({
          page,
          interception: { url: new RegExp(url.replace(/\?/g, '\\?')), content: this.getRecaptchaV2InvisibleContent(siteKey), contentType: 'text/html' },
        })

        this.interceptResponse(
          {
            page,
            interception: { url: /(https:\/\/www\.google\.com\/recaptcha\/api2\/userverify)/ },
          }, async res => {
              try {
                // Extract captcha token from response body
                const captchaToken = /("uvresp",)(")(.*?)(",)/gm.exec(Buffer.from(res.body, 'base64').toString())[3]

                // Reset to default captcha window content once solved
                await this.interceptRequest({
                    page,
                    interception: { url: /https:\/\/www\.google\.com/, content: DEFAULT_CAPTCHA_WINDOW_CONTENT, contentType: 'text/html' },
                })

                await page.goto(DEFAULT_GOOGLE_URL)

                // Verify captcha token exists
                if (captchaToken) {
                    // If captcha token exists, resolve the captcha token
                    return resolve(captchaToken)
                } else {
                    // True or false decides whether to retry the solve function until it is solved, or push to beginning of queue
                    return reject(true)
                }
              } catch (err) {
                  return reject(true)
              }
          }
        )

        await page.goto(url)
      } catch (err) {
        // True or false decides whether to retry the solve function until it is solved, or push to beginning of queue
        return reject(false)
      }
    })
  }

  /**
   * 
   * @param {Object} args - Arguments to solve a datadome geetest slide captcha
   * @param {string} args.solverId - Id of the desired solver to solve the geetest slide captcha
   * @param {string} args.url - Url of the captcha prompt
   */
  solveDatadomeGeetestSlide({solverId, url}) {
      return new Promise(async (resolve, reject) => {
        try {
            // If opencv has not been initialized, await the promise returned from the require('opencv.js') statement
            if (!openCvRuntimeInitialized) await cv()

            // Don't need to update <Solver>.usage.inUse variable, as it's managed by the intermediate captcha queue handling methods
            const solverInfo = this.solvers.find(({id}) => id === solverId)
                  solverInfo.usage.current = reject

            const page = solverInfo.page,
                  cursor = createCursor(page, {x: this.randomInt(0, 1920), y: this.randomInt(0, 1080)})

            page.on('close', () => {
                // True or false decides whether to retry the solve function until it is solved, or push to beginning of queue
                reject(false)
            })

            this.interceptResponse({
                page,
                interception: {regex: false, url}
            }, async (res) => {
                try {
                    if (res.statusCode === 403) {
                        // Reset to default captcha window content upon forbidden
                        await this.interceptRequest({
                            page,
                            interception: { url: /https:\/\/www\.google\.com/, content: DEFAULT_CAPTCHA_WINDOW_CONTENT, contentType: 'text/html' },
                        })
    
                        await page.goto(DEFAULT_GOOGLE_URL)
    
                        // If navigation status code is forbidden switch to another solver
                        return reject(false)
                    }    
                } catch (err) {
                    return reject(true)
                }
            })

            await page.goto(url, {waitUntil: 'networkidle2'})

            // Click the start button
            await cursor.click('[aria-label="Click to verify"]', { waitForSelector: true })

            let captcha, _, original

            const solveSlide = async () => {
                try {
                    // Setup an interception on the final geetest captcha request to verify it was successful, otherwise retry
                    await this.interceptResponse({
                        page,
                        interception: {url: /ajax\.php/}
                    }, async (res) => {
                        try {
                            if (res.statusCode === 200) {
                                const resJSON = JSON.parse(/^.*?(\((\{.*?})\))/.exec(Buffer.from(res.body, 'base64').toString())[2]) // Parse the JSON from the response callback
                                if (!resJSON.success && resJSON.message === 'fail') {
                                    // Setup an interception to solve the slide captcha once a new captcha has been received
                                    await this.interceptResponse({
                                        page,
                                        interception: {url: /refresh\.php/}
                                    }, async () => {
                                        try {
                                            // Wait for the captcha and original image to be updated to the newly refreshed slide captcha images
                                            await page.waitForFunction((captcha, original) => {
                                                const [_captcha, _, _original] = Array.from(document.querySelectorAll('.geetest_canvas_img canvas'))
                                                return _captcha !== captcha && _original !== original
                                            }, {polling: 'raf'}, captcha, original)
                                            
                                            solveSlide()
                                        } catch (err) {
                                            return reject(true)
                                        }
                                    })
        
                                    // Wait for the slider to reset
                                    await page.waitForSelector('.geetest_slider_button[style="opacity: 1; transform: translate(0px, 0px);"]', {polling: 'raf'})
        
                                    // If the slide was invalid, refresh to get a new slide captcha and try again
                                    await page.waitForSelector('.geetest_refresh_icon', {visible: true})
                                    await cursor.click('.geetest_refresh_icon', { waitForSelector: true })
                                }
                                else if (!resJSON.success) {
                                    // Click the network retry button
                                    await page.waitForSelector('.geetest_reset_tip_content', {visible: true})
                                    await cursor.click('.geetest_reset_tip_content', { waitForSelector: true })
                                    solveSlide()
                                }
                            } else return reject(true) // Status code should always be 200, otherwise retry on the same solver    
                        } catch (err) {
                            return reject(true)
                        }
                    })


                    // Wait for the slider images to be visible
                    await page.waitForSelector('.geetest_canvas_img canvas', {visible: true})
                    try {
                        // Wait for the canvas data url length to be greater than 1572, if it takes more than 15 seconds, retry on the same solver
                        await page.waitForFunction(`Array.from(document.querySelectorAll('.geetest_canvas_img canvas')).every(canvas => canvas.toDataURL().replace('data:image/png;base64', '').length > 1600)`, {polling: 'raf', timeout: 15000})
                    } catch (err) {
                        return reject(true)
                    }

                    // Get the slider images
                    [captcha, _, original] = await page.$$eval('.geetest_canvas_img canvas', canvases => {
                        return canvases.map(canvas => canvas.toDataURL().replace('data:image/png;base64', ''))
                    })

                    captcha = await Jimp.read(Buffer.from(captcha, 'base64'))
                    original = await Jimp.read(Buffer.from(original, 'base64'))

                    // Pixelmatch to find the difference between the original, and the captcha image
                    const _diffImage = new Jimp(original.bitmap.width, original.bitmap.height)
                    pixelMatch(
                        original.bitmap.data,
                        captcha.bitmap.data,
                        _diffImage.bitmap.data,
                        original.bitmap.width,
                        original.bitmap.height,
                        {
                            includeAA: true,
                            threshold: 0.14
                        }
                    )

                    // Enhance difference image via opencv
                    const src = cv.matFromImageData(_diffImage.bitmap)
                    const dst = new cv.Mat()
                    const kernel = cv.Mat.ones(2, 5, cv.CV_8UC1)
                    const anchor = new cv.Point(-1, -1)
                    cv.threshold(src, dst, 127, 255, cv.THRESH_BINARY)
                    cv.erode(dst, dst, kernel, anchor, 1)
                    cv.dilate(dst, dst, kernel, anchor, 1)        

                    // Create enhanced image
                    const diffImage = new Jimp({
                        width: dst.cols,
                        height: dst.rows,
                        data: Buffer.from(dst.data)
                    })

                    const getPuzzlePiecesSlotCenterPosition = (diffImage) => {
                        const src = cv.matFromImageData(diffImage.bitmap)
                        const dst = new cv.Mat()

                        cv.cvtColor(src, src, cv.COLOR_BGR2GRAY)
                        cv.threshold(src, dst, 150, 255, cv.THRESH_BINARY_INV)

                        const contours = new cv.MatVector()
                        const hierarchy = new cv.Mat()
                        cv.findContours(
                            dst,
                            contours,
                            hierarchy,
                            cv.RETR_EXTERNAL,
                            cv.CHAIN_APPROX_SIMPLE
                        )

                        // Get the contour with the largest area (biggest puzzle piece found) and return the center coordinates of the given contour
                        let largestContourMoment, largestContourArea = 0
                        for (let i = 0; i < contours.size(); i++) {
                            const contour = contours.get(i)
                            const moment = cv.moments(contour)
                            if (moment.m00 > largestContourArea) largestContourArea = moment.m00, largestContourMoment = moment
                        }
                        
                        const x = Math.floor(largestContourMoment.m10 / largestContourMoment.m00)
                        const y = Math.floor(largestContourMoment.m01 / largestContourMoment.m00)
                    
                        return {x, y}
                    }

                    const findPuzzlePiecePosition = async () => {
                        try {
                            let [_, puzzle] = await page.$$eval('.geetest_canvas_img canvas', canvases => {
                                return canvases.map(canvas => canvas.toDataURL().replace('data:image/png;base64', ''))
                            })
                        
                            puzzle = await Jimp.read(Buffer.from(puzzle, 'base64'))
    
                            const srcPuzzle = cv.matFromImageData(puzzle.bitmap)
                            const dstPuzzle = new cv.Mat()
                        
                            cv.cvtColor(srcPuzzle, srcPuzzle, cv.COLOR_BGR2GRAY)
                            cv.threshold(srcPuzzle, dstPuzzle, 127, 255, cv.THRESH_BINARY)
                        
                            const kernel = cv.Mat.ones(2, 5, cv.CV_8UC1)
                            const anchor = new cv.Point(-1, -1)
                            cv.dilate(dstPuzzle, dstPuzzle, kernel, anchor, 1)
                            cv.erode(dstPuzzle, dstPuzzle, kernel, anchor, 1)
                        
                            const contours = new cv.MatVector()
                            const hierarchy = new cv.Mat()
                            cv.findContours(
                                dstPuzzle,
                                contours,
                                hierarchy,
                                cv.RETR_EXTERNAL,
                                cv.CHAIN_APPROX_SIMPLE
                            )
                        
                            // Get the contour with the largest area (biggest puzzle piece found) and return the center coordinates of the given contour
                            let largestContourMoment, largestContourArea = 0
                            for (let i = 0; i < contours.size(); i++) {
                                const contour = contours.get(i)
                                const moment = cv.moments(contour)
                                if (moment.m00 > largestContourArea) largestContourArea = moment.m00, largestContourMoment = moment
                            }
                            
                            const x = Math.floor(largestContourMoment.m10 / largestContourMoment.m00)
                            const y = Math.floor(largestContourMoment.m01 / largestContourMoment.m00)
    
                            return {x, y}    
                        } catch (err) {
                            return reject(true)
                        }
                    }
                    
                    // Get the center point of the puzzle piece from the image highlighting differences between the original and captcha image
                    const center = await getPuzzlePiecesSlotCenterPosition(diffImage)

                    // Move the slider to the correct position
                    const sliderHandle = await page.$('.geetest_slider_button')
                    const handle = await sliderHandle.boundingBox()
                
                    let handleX = handle.x + handle.width / 2;
                    let handleY = handle.y + handle.height / 2;
                
                    await page.mouse.move(handleX, handleY, { steps: this.randomInt(25, 100)} );
                    await page.mouse.down();
                
                    let destX = handleX + center.x;
                    let destY = handle.y + handle.height / 3;
                    
                    const randomMovementDelays = (destX, destY) => {

                        const xCoordinateSplitRandoms = Array.from(Array(this.randomInt(30, 50)), () => this.randomFloat(0, 1))
                        const xCoordinateSplitSum = xCoordinateSplitRandoms.reduce((a, b) => a + b)
                        const xCoordinateSplitPercents = xCoordinateSplitRandoms.map(x => x / xCoordinateSplitSum)
                        const xCoordinateSplitParts = xCoordinateSplitPercents.map(x => x * destX)

                        let curX = 0

                        return xCoordinateSplitParts.map(x => ({x: curX += x, y: this.randomInt(0, 1) ? destY + this.randomFloat(15, 30) : destY - this.randomFloat(15, 30)}))
                    }

                    // Geetest checks mouse movements, generate some random mouse movements to vary the positions of the x and y movements, to prevent having a straight line moving the slide captcha
                    for (const movement of randomMovementDelays(destX, destY)) {
                        await page.mouse.move(movement.x, movement.y, { steps: this.randomInt(1, 2) });
                    }
                
                    // The puzzle piece is initialized at a random position, so find the current position and correct it
                    const puzzlePos = await findPuzzlePiecePosition(page)
                    destX = destX + center.x - puzzlePos.x;
                    destY = handle.y + handle.height / 2;
                    await page.waitForTimeout(this.randomInt(50, 250))
                    await page.mouse.move(destX, destY, { steps: this.randomInt(25, 50) })
                    await page.waitForTimeout(this.randomInt(50, 250))
                    await page.mouse.up()
                } catch (err) {
                    return reject(true)
                }
            }

            // Setup an interception on the datadome captcha check endpoint to verify the captcha was solved
            await this.interceptResponse({
                page,
                interception: { url: /captcha\/check/}
            }, async (res) => {
                try {
                    // Reset to default captcha window content once solved
                    await this.interceptRequest({
                        page,
                        interception: { url: /https:\/\/www\.google\.com/, content: DEFAULT_CAPTCHA_WINDOW_CONTENT, contentType: 'text/html' },
                    })

                    await page.goto(DEFAULT_GOOGLE_URL)

                    if (res.statusCode === 200) {
                        const resJSON = JSON.parse(Buffer.from(res.body, 'base64').toString())
                        if (resJSON.cookie) {
                            return resolve(resJSON.cookie)
                        } else return reject(true)
                    } else return reject(true) // Retry on the same solver, if invalid
                } catch (err) {
                    return reject(true)
                }
            })
            
            solveSlide()
        } catch (err) {
            // Don't retry on same solver if error
            return reject(false)
        }    
      })
  }

  /**
   * Wraps a captcha solve function with error handling
   *
   * @function wrapCaptchaSolveWithErrorHandling
   *
   * @param {Function} captchaSolveFunction - Function to solve a captcha
   * @param {Object} parameters - Object with parameters to pass to function call
   */
  wrapCaptchaSolveWithErrorHandling(captchaSolveFunction, parameters) {
    return new Promise(async resolve => {
      try {
        const captchaSolveFunctionWrapper = () => {
          captchaSolveFunction
            .bind(this)(parameters)
            .then(captchaToken => {
              return resolve(captchaToken)
            })
            .catch(err => {
              if (err) {
                captchaSolveFunctionWrapper()
              } else {
                // False makes the captcha be pushed to the beginning of the queue
                return resolve(false)
              }
            })
        }
        captchaSolveFunctionWrapper()
      } catch (err) {
        // False makes the captcha be pushed to the beginning of the queue
        return resolve(false)
      }
    })
  }

  /**
   * Requests a solve for a captcha
   *
   * @function solveCaptcha
   *
   * @param {Object} args - Arguments to request a solve for a captcha
   * @param {"RECAPTCHA_V2_VISIBLE" | "RECAPTCHA_V2_INVISIBLE" | "RECAPTCHA_V3_VISIBLE" | "DATADOME_GEETEST_SLIDE"} args.type - Type of the captcha to be tested
   * @param {string} args.url - Url of the page with a recpatcha
   * @param {?string} args.siteKey - Site key of the page with a recaptcha
   * @param {?string} args.action - Action of an invisible v3 recaptcha
   */
  solveCaptcha({ type, url, siteKey, action }) {
    return new Promise(async (resolve, reject) => {
      try {
        // Find a solver that is available and not in use
        if (this.solvers.some(_solver => _solver.usage.available && !_solver.usage.inUse)) {
          const availableSolvers = this.solvers.filter(_solver => _solver.usage.available & !_solver.usage.inUse)
          const solverInfo = availableSolvers[this.randomInt(0, availableSolvers.length - 1)]
          solverInfo.usage.inUse = true

          let captchaToken

          // Solve the corresponding captcha type
          switch (type) {
            case 'RECAPTCHA_V2_VISIBLE':
                captchaToken = await this.wrapCaptchaSolveWithErrorHandling(this.solveRecaptchaV2Visible, { solverId: solverInfo.id, url, siteKey })
                break
            case 'RECAPTCHA_V3_INVISIBLE':
                captchaToken = await this.wrapCaptchaSolveWithErrorHandling(this.solveRecaptchaV3Invisible, { solverId: solverInfo.id, url, siteKey, action })
                break
            case 'RECAPTCHA_V2_INVISIBLE':
                captchaToken = await this.wrapCaptchaSolveWithErrorHandling(this.solveRecaptchaV2Invisible, { solverId: solverInfo.id, url, siteKey })
                break;
            case 'DATADOME_GEETEST_SLIDE':
                captchaToken = await this.wrapCaptchaSolveWithErrorHandling(this.solveDatadomeGeetestSlide, {solverId: solverInfo.id, url})
                break;
            default:
                return reject()
          }

          solverInfo.usage.inUse = false

          if (captchaToken) {
            // If acquiring a captcha token is successful, notify that the solver is available, and resolve the promise with the captchaToken
            this.emitter.emit('available', solverInfo.id)
            return resolve(captchaToken)
          } else this.queue.unshift({ type, siteKey, url, action, resolve, reject })
        } else this.queue.push({ type, siteKey, url, action, resolve, reject }) // If no solvers are available and not in use, push captcha to end of the captcha queue
      } catch (err) {
        return reject(err)
      }
    })
  }

  /**
   * Tests a captcha
   *
   * @function testCaptcha
   *
   * @param {Object} args - Arguments to test a captcha
   * @param {string} args.solverId - Solver to test captcha on
   * @param {"RECAPTCHA_V2_VISIBLE" | "RECAPTCHA_V2_INVISIBLE" | "RECAPTCHA_V3_INVISIBLE"} args.type - Type of the captcha to be tested
   * @param {string} args.url - Url of the page with a recpatcha
   * @param {string} args.siteKey - Site key of the page with a recaptcha
   * @param {?string} args.action - Action of an invisible v3 recaptcha
   */
  testCaptcha({ solverId, type, url, siteKey, action }) {
    return new Promise(async (resolve, reject) => {
      try {
        if (this.solvers.some(_solver => _solver.id === solverId && _solver.usage.available && !_solver.usage.inUse)) {
          const solverInfo = this.solvers.find(solver => solver.id === solverId && solver.usage.available && !solver.usage.inUse)
          solverInfo.usage.inUse = true

          let captchaToken

          // Solve the corresponding captcha type
          switch (type) {
            case 'RECAPTCHA_V2_VISIBLE':
              captchaToken = await this.wrapCaptchaSolveWithErrorHandling(this.solveRecaptchaV2Visible, { solverId: solverInfo.id, url, siteKey })
              break
            case 'RECAPTCHA_V3_INVISIBLE':
              captchaToken = await this.wrapCaptchaSolveWithErrorHandling(this.solveRecaptchaV3Invisible, { solverId: solverInfo.id, url, siteKey, action })
              break
            case 'RECAPTCHA_V2_INVISIBLE':
              captchaToken = await this.wrapCaptchaSolveWithErrorHandling(this.solveRecaptchaV2Invisible, { solverId: solverInfo.id, url, siteKey, action })
              break
            case 'DATADOME_GEETEST_SLIDE':
              captchaToken = await this.wrapCaptchaSolveWithErrorHandling(this.solveDatadomeGeetestSlide, {solverId: solverInfo.id, url})
              break;
            default:
              return reject()
          }

          solverInfo.usage.inUse = false
          this.emitter.emit('available', solverInfo.id)

          return resolve(captchaToken)
        }
      } catch (err) {
        return reject(err)
      }
    })
  }

  /**
   * Solves a yeezysupply 3DS prompt
   * 
   * @param {Object} args - Arguments to solve a yeezysupply 3DS prompt
   * @param {string} url - The 3DS url
   * @param {string} content - The content fetched from the 3DS url
   * @param {string} user_agent - The user agent used to fetch the 3DS url
   * @param {Object} proxy - The proxy used to fetch the 3DS url
   */
  solveYeezysupply3DS({url, content, user_agent, proxy}) {
      return new Promise(async (resolve, reject) => {
        try {
            // Create the browserview window which has window controls
            const window = new BrowserWindow({
                width: 375,
                height: 650,
                minWidth: 375,
                minHeight: 650,
                maxWidth: 675,
                maxWidth: 375,
                maxHeight: 650,
                webPreferences: {
                  preload: path.join(app.getAppPath(), './main.api.js'),
                  nodeIntegration: false,
                  enableRemoteModule: false,
                  contextIsolation: true,
                },
                show: false,
                backgroundColor: '#191E28',
                frame: false,
                autoHideMenuBar: true,
                darkTheme: true,
                transparent: false
            })
            // Load the window controls
            window.loadURL(this.startUrl('window.html'))
            // Show the window once the window controls have been loaded
            window.webContents.on('did-finish-load', () => window.show())

            // Initialize proxy server used to rotate proxies
            const proxyServer = this.createProxyServer({ port: await getPort() })
            // Create an electron session from a random partition string
            const electronSession = session.fromPartition(this.randomUUIDV4(), { cache: false })
            // Set the session's proxy to the newly created proxy server
            await electronSession.setProxy({ proxyRules: `http://localhost:${proxyServer.port}` })
            // Set the session's proxy to the desired user agent
            electronSession.setUserAgent(user_agent)

            // Create the view with the proxy, and user agent
            const view = new BrowserView({
                webPreferences: {
                    session: electronSession,
                    contextIsolation: true,
                    nodeIntegration: false,
                    enableRemoteModupublicle: false,
                }
            })

            // Must load the default url on the webcontents prior to fetching the page
            await view.webContents.loadURL(`data:text/html,${DEFAULT_CAPTCHA_WINDOW_CONTENT}`)    
            // Add the browserview to the window
            window.addBrowserView(view)

            // Get the puppeteer page object of the added browserview
            const page = (await this.settings.browser.pages())[view.webContents.id - this.viewPageDifference]

            window.on('close', () => {
                return reject()
            })

            // Make the browserview visible, update the bounds to match the new window controls bounds
            view.setBounds({ x: 0, y: 35, width: 375, height: 600 })

            // Rotate the proxy
            proxyServer.rotate(proxy)

            // Setup an interception to intercept the 3ds payment authentication response
            await this.interceptRequest({
                page,
                interception: { stop: true, url: /\/payment\/callback/gmi }
            }, (request) => {
                const formParams = new URLSearchParams(request.postData)

                // Once window is destroyed, resolve with payment authentication response
                window.once('closed', () => {
                    return resolve({
                        PaRes: decodeURIComponent(formParams.get('PaRes'))
                    })
                })

                // Destroy the window
                window.destroy()
            })

            // Setup an interception of the 3ds url to be replaced with the 3ds fetched content
            await this.interceptRequest({
                page,
                interception: { regex: false, url, content, contentType: 'text/html' }
            })

            await page.goto(url)
        } catch (err) {
            return reject(err)
        }
      })
  }

  /**
   * Opens a browser for manual input, given a type
   * 
   * @param {Object} args - Arguments to open a browser
   * @param {'YEEZYSUPPLY_3DS'} args.type - Type of browser to open
   * @param {string} args.url - The 3DS url
   * @param {string} args.content - The content fetched from the 3DS url
   * @param {string} args.user_agent - The user agent used to fetch the 3DS url
   * @param {{host: string, port: number, username: string | undefined, password: string | undefined}} args.proxy - The proxy used to fetch the 3DS url
   */
  openBrowser({type, url, content, user_agent, proxy}) {
    switch (type) {
        case 'YEEZYSUPPLY_3DS':
            return this.solveYeezysupply3DS({url, content, user_agent, proxy})
    }
  }

  getSolveCaptcha = () => this.solveCaptcha.bind(this)

  getOpenBrowser = () => this.openBrowser.bind(this)
}

function getChromiumExecPath() {
  return puppeteer.executablePath().replace('app.asar', 'app.asar.unpacked');
}